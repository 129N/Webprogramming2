<script lang="ts">
    import { Icon } from '@iconify/svelte';
    import { onMount } from 'svelte';
    import axios from 'axios';

    // Sample data structure - replace with actual API data
    let currencyPairs = [
        { symbol: 'USD/JPY', price: '---', change: '0.00', percentChange: '0.00%' },
        { symbol: 'EUR/USD', price: '---', change: '0.00', percentChange: '0.00%' },
        { symbol: 'GBP/USD', price: '---', change: '0.00', percentChange: '0.00%' },
        { symbol: 'AUD/USD', price: '---', change: '0.00', percentChange: '0.00%' },
        { symbol: 'USD/CAD', price: '---', change: '0.00', percentChange: '0.00%' }
    ];

    // API configuration
    const API_KEY = 'YOUR_API_KEY'; // Replace with actual API key
    const API_URL = 'https://api.twelvedata.com/price'; // Example API

    async function fetchCurrencyData() {
        try {
            // Example API call (replace with actual API you choose)
            const response = await axios.get(API_URL, {
                params: {
                    symbol: 'USD/JPY,EUR/USD,GBP/USD,AUD/USD,USD/CAD',
                    apikey: API_KEY
                }
            });
            
            // Update currency data
            currencyPairs = currencyPairs.map(pair => {
                const newPrice = response.data[pair.symbol]?.price || '---';
                return {
                    ...pair,
                    price: newPrice,
                    // Calculate change and percent change here
                };
            });
        } catch (error) {
            console.error('Error fetching currency data:', error);
        }
    }

    // Fetch data on mount and set interval
    onMount(() => {
        fetchCurrencyData();
        const interval = setInterval(fetchCurrencyData, 60000); // Update every minute
        
        return () => clearInterval(interval);
    });
</script>

<div class="currency-ticker">
    <div class="ticker-container">
        {#each currencyPairs as pair}
            <div class="ticker-item">
                <span class="symbol">{pair.symbol}</span>
                <span class="price">{pair.price}</span>
                <span class:positive={parseFloat(pair.change) > 0} 
                      class:negative={parseFloat(pair.change) < 0}>
                    {pair.change} ({pair.percentChange})
                </span>
                {#if parseFloat(pair.change) > 0}
                    <Icon icon="mdi:trending-up" class="trend-icon" />
                {:else if parseFloat(pair.change) < 0}
                    <Icon icon="mdi:trending-down" class="trend-icon" />
                {:else}
                    <Icon icon="mdi:trending-neutral" class="trend-icon" />
                {/if}
            </div>
        {/each}
    </div>
</div>

<style>
    .currency-ticker {
        background-color: #2c3e50;
        color: white;
        padding: 8px 0;
        overflow: hidden;
        white-space: nowrap;
    }

    .ticker-container {
        display: inline-block;
        animation: ticker 30s linear infinite;
    }

    .ticker-item {
        display: inline-block;
        margin: 0 30px;
        font-size: 0.9rem;
    }

    .symbol {
        font-weight: bold;
        margin-right: 8px;
    }

    .price {
        margin-right: 8px;
        font-family: monospace;
    }

    .positive {
        color: #4CAF50;
    }

    .negative {
        color: #F44336;
    }

    .trend-icon {
        margin-left: 5px;
        vertical-align: middle;
    }

    @keyframes ticker {
        0% { transform: translateX(100%); }
        100% { transform: translateX(-100%); }
    }
</style>